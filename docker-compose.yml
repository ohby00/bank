services:
  # MySQL 서비스들
#  user-mysql:
#    image: mysql:8.0.36
#    restart: always
#    container_name: user-mysql
#    ports:
#      - "3307:3306"
#    environment:
#      MYSQL_ROOT_PASSWORD: 12341234
#      MYSQL_DATABASE: user
#      MYSQL_USER: obw
#      MYSQL_PASSWORD: 12341234
#      TZ: Asia/Seoul
#
#  order-mysql:
#    image: mysql:8.0.36
#    restart: always
#    container_name: order-mysql
#    ports:
#      - "3308:3306"
#    environment:
#      MYSQL_ROOT_PASSWORD: 12341234
#      MYSQL_DATABASE: orders
#      MYSQL_USER: obw
#      MYSQL_PASSWORD: 12341234
#      TZ: Asia/Seoul
#
#  product-mysql:
#    image: mysql:8.0.36
#    restart: always
#    container_name: product-mysql
#    ports:
#      - "3309:3306"
#    environment:
#      MYSQL_ROOT_PASSWORD: 12341234
#      MYSQL_DATABASE: product
#      MYSQL_USER: obw
#      MYSQL_PASSWORD: 12341234
#      TZ: Asia/Seoul
#
#  quantity-mysql:
#    image: mysql:8.0.36
#    restart: always
#    container_name: quantity-mysql
#    ports:
#      - "3300:3306"
#    environment:
#      MYSQL_ROOT_PASSWORD: 12341234
#      MYSQL_DATABASE: quantity
#      MYSQL_USER: obw
#      MYSQL_PASSWORD: 12341234
#      TZ: Asia/Seoul

  user-redis:
    image: redis
    restart: always
    container_name: user-redis
    command: --port 6379
    ports:
      - "6379:6379"
    expose:
      - "6379"

#  quantity-redis:
#    image: redis
#    restart: always
#    container_name: quantity-redis
#    command: --port 6380
#    ports:
#      - "6380:6380"
#    expose:
#      - "6380"

#  zookeeper:
#    container_name: zookeeper
#    image: bitnami/zookeeper:latest
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#    ports:
#      - "2181:2181"
#    healthcheck:
#      test: if netstat -ltn | grep -c "2181"; then echo 0; else echo 1; fi
#      interval: 10s
#      timeout: 5s
#      retries: 2
#
#  kafka:
#    container_name: kafka
#    image: bitnami/kafka:latest
#    ports:
#      - "9092:9092"
#      - "29092:29092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://127.0.0.1:29092
#      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://kafka:29092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#    depends_on:
#      zookeeper:
#        condition: service_healthy
#    healthcheck:
#      test: if netstat -ltn | grep -c "9092"; then echo 0; else echo 1; fi
#      interval: 10s
#      timeout: 5s
#      retries: 2

#  discovery-service:
#    image: 'obw123/discovery-service'
#    ports:
#      - "8761:8761"
#    depends_on:
#      - kafka
#    healthcheck:
#      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 kafka 9092"]
#      interval: 10s
#      timeout: 5s
#      retries: 2
#
#  apigateway-service:
#    image: 'obw123/apigateway-service'
#    ports:
#      - "8000:8000"
#    environment:
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
#    depends_on:
#      - discovery-service
#    healthcheck:
#      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 discovery-service 8761"]
#      interval: 10s
#      timeout: 5s
#      retries: 2
#
#  user-service:
#    image: 'obw123/user-service'
#    ports:
#      - "8083:8083"
#    environment:
#      - spring.datasource.url=jdbc:mysql://user-mysql:3306/user
#      - spring.data.redis.host=user-redis
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
#    depends_on:
#      - user-mysql
#      - user-redis
#      - apigateway-service
#      - discovery-service
#
#    healthcheck:
#      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 user-service 8083"]
#      interval: 10s
#      timeout: 5s
#      retries: 4
#
#  product-service:
#    image: 'obw123/product-service'
#    ports:
#      - "8082:8082"
#    environment:
#      - spring.datasource.url=jdbc:mysql://product-mysql:3306/product
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
#      - kafka.bootstrap.servers=kafka:9092
#    depends_on:
#      - product-mysql
#      - kafka
#      - apigateway-service
#      - discovery-service
#    healthcheck:
#      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 product-service 8082"]
#      interval: 10s
#      timeout: 5s
#      retries: 4
#
#  order-service:
#    image: 'obw123/order-service'
#    ports:
#      - "8081:8081"
#    environment:
#      - spring.datasource.url=jdbc:mysql://order-mysql:3306/orders
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
#      - kafka.bootstrap.servers=kafka:9092
#    depends_on:
#      - order-mysql
#      - kafka
#      - apigateway-service
#      - discovery-service
#    healthcheck:
#      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 order-service 8081"]
#      interval: 10s
#      timeout: 5s
#      retries: 4
#
#  quantity-service:
#    image: 'obw123/quantity-service'
#    ports:
#      - "8084:8084"
#    environment:
#      - spring.datasource.url=jdbc:mysql://quantity-mysql:3306/quantity
#      - spring.data.redis.host=quantity-redis
#      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
#      - kafka.bootstrap.servers=kafka:9092
#    depends_on:
#      - quantity-mysql
#      - quantity-redis
#      - kafka
#      - apigateway-service
#      - discovery-service
#
#    healthcheck:
#      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 quantity-service 8084"]
#      interval: 10s
#      timeout: 5s
#      retries: 4
#
